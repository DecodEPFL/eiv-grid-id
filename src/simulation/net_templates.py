import numpy as np
import pandapower as pp
import pandas as pd
from pandapower.control import ConstControl
from pandapower.timeseries import DFData

from src.simulation.load_profile import BusData
from src.simulation.network import LineData

"""
    Class implementing a custom PandaPower network from BusData and LineData.
    IEEE 123 bus network template data is given by S. Bolognani from
    https://github.com/saveriob/approx-pf/blob/master/casefiles/case_ieee123.m

    Copyright @donelef, @jbrouill on GitHub
"""

ext_sc_carac = {'mva' :1000, 'rx':0.1, 'x0x':1.0, 'r0x0':0.1}
#ext_sc_carac = {'mva' :np.nan, 'rx':np.nan, 'x0x':np.nan, 'r0x0':np.nan}

class NetData(pp.pandapowerNet):
    """
    Implements PandaPower network creation from custom data.
    """

    def __init__(self, ns: list = [], ls: list = []):
        pp.pandapowerNet.__init__(self, pp.create_empty_network("net"))
        self.create_buses(ns)
        self.create_lines(ls)

    def create_bus(self, i: int, t: int, p: float, q: float, kv: float, Z: float = 0, I: float = 0):
        """
        Adds a bus to the network

        :param i: index
        :param t: type (see BusData for more info)
        :param p: nominal load/generation active power
        :param q: nominal load/generation reactive power
        :param kv: nominal voltage
        :param Z: percentage of constant impedance
        :param I: percentage of constant current
        :return: self network for chained calls
        """
        bus = pp.create_bus(self, kv, name=str(i), index=i)
        if t == 1:
            pp.create_load(self, bus, p, q, name="(" + str(i) + ")", index=i, const_z_percent=Z, const_i_percent=I)
        elif t == 3:
            pp.create_load(self, bus, 0, 0, name="(" + str(i) + ")", index=i)
            pp.create_ext_grid(self, bus, s_sc_max_mva=ext_sc_carac['mva'], rx_max=ext_sc_carac['rx'],
                               r0x0_max=ext_sc_carac['r0x0'], x0x_max=ext_sc_carac['x0x'], max_p_mw=p, max_q_mvar=q)
        return self

    def create_buses(self, ns: list):
        """
        Adds an array of buses to the network

        :param ns: list of BusData objects to add
        :return: self network for chained calls
        """
        for n in ns:
            bus = pp.create_bus(self, n.baseKV, name=str(n.id), index=n.id)
            if n.type == 1:
                pp.create_load(self, bus, n.Pd, n.Qd, name="(" + str(n.id) + ")", index=n.id,
                               const_z_percent=n.Z, const_i_percent=n.I)
            if n.type == 3:
                pp.create_load(self, bus, 0, 0, name="(" + str(n.id) + ")", index=n.id)
                pp.create_ext_grid(self, bus, s_sc_max_mva=ext_sc_carac['mva'], rx_max=ext_sc_carac['rx'],
                                   r0x0_max=ext_sc_carac['r0x0'], x0x_max=ext_sc_carac['x0x'],
                                   max_p_mw=n.Pd, max_q_mvar=n.Qd)
        return self

    def create_line(self, f: int, t: int, r: float, x: float, l: float = 1):
        """
        Adds a line to the network

        :param f: index of starting bus
        :param t: index of end bus
        :param r: total resistance
        :param x: total reactance
        :param l: length in km
        :return: self network for chained calls
        """
        if f > t:
            f, t = t, f
        pp.create_line_from_parameters(self, pp.get_element_index(self, "bus", f),
                                       pp.get_element_index(self, "bus", t),
                                       l, r / l, x / l, 0, 1e10, "(" + str(f) + "," + str(t) + ")")
        return self

    def create_lines(self, ls: list):
        """
        Adds an array of lines to the network

        :param ls: list of LineData objects to add
        :return: self network for chained calls
        """
        for l in ls:
            if l.start_bus > l.end_bus:
                l.start_bus, l.end_bus = l.end_bus, l.start_bus

            pp.create_line_from_parameters(self, pp.get_element_index(self, "bus", str(l.start_bus)),
                                           pp.get_element_index(self, "bus", str(l.end_bus)),
                                           l.length, l.R / l.length, l.X / l.length, 0, 1e10,
                                           "(" + str(l.start_bus) + "," + str(l.end_bus) + ")")
        return self

class NetData3P(pp.pandapowerNet):
    """
    Implements PandaPower network creation from custom data.
    """

    def __init__(self, ts: dict, ns: list = [], ls: list = []):
        pp.pandapowerNet.__init__(self, pp.create_empty_network("net"))

        for tn, t in ts.items():
            pp.create_std_type(self, t, tn, element='line')

        self.create_buses(ns)
        self.create_lines(ls)

        pp.add_zero_impedance_parameters(self)

    def create_bus(self, i: int, t: int, p: float, q: float, kv: float, Z: float = 0, I: float = 0):
        """
        Adds a bus to the network

        :param i: index
        :param t: type (see BusData for more info)
        :param p: nominal load/generation active power
        :param q: nominal load/generation reactive power
        :param kv: nominal voltage
        :param Z: percentage of constant impedance
        :param I: percentage of constant current
        :return: self network for chained calls
        """
        bus = pp.create_bus(self, kv, name=str(i), index=i)
        if t == 1:
            if np.isscalar(p):
                pp.create_load(self, bus, p, q, name=str(i), index=i,
                               const_z_percent=Z, const_i_percent=I)
            else:
                pp.create_asymmetric_load(self, bus, p[0], p[1], p[2], q[0], q[1], q[2], name=str(i), index=i)
        elif t == 3:
            assert(np.isscalar(p))
            pp.create_load(self, bus, 0, 0, name=str(i), index=i)
            pp.create_ext_grid(self, bus, s_sc_max_mva=ext_sc_carac['mva'], rx_max=ext_sc_carac['rx'],
                               r0x0_max=ext_sc_carac['r0x0'], x0x_max=ext_sc_carac['x0x'], max_p_mw=p, max_q_mvar=q)
        return self

    def create_buses(self, ns: list):
        """
        Adds an array of buses to the network

        :param ns: list of BusData objects to add
        :return: self network for chained calls
        """
        for n in ns:
            self.create_bus(n.id, n.type, n.Pd, n.Qd, n.baseKV, n.Z, n.I)
        return self

    def create_line(self, f: int, t: int, l: float, typename: str):
        """
        Adds a line to the network

        :param f: index of starting bus
        :param t: index of end bus
        :param l: length in km
        :param typename: name of std type
        :return: self network for chained calls
        """
        if f > t:
            f, t = t, f
        pp.create_line(self, pp.get_element_index(self, "bus", str(f)), pp.get_element_index(self, "bus", str(t)),
                       l, typename)
        return self

    def create_lines(self, ls: list):
        """
        Adds an array of lines to the network

        :param ls: list of LineData objects to add
        :return: self network for chained calls
        """
        for l in ls:
            self.create_line(l.start_bus, l.end_bus, l.length, l.t)
        return self


# Full 56 bus network

bolognani_bus56 = \
    [BusData(1, 1, 0.160, 0.080, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(2, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(3, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(4, 1, 0.100, 0.050, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(5, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(6, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(7, 1, 0.000, 0.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(8, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(9, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(10, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(11, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(12, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(13, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(14, 1, 0.075, 0.035, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(15, 1, 0.140, 0.100, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(16, 1, 0.075, 0.035, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(17, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(18, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(19, 1, 0.245, 0.180, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(20, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(21, 1, 0.000, 0.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(22, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(23, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(24, 1, 0.060, 0.030, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(25, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(26, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(27, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(28, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(29, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(30, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(31, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(32, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(33, 1, 0.000, 0.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(34, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(35, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(36, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(37, 1, 0.100, 0.050, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(38, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(39, 1, 0.140, 0.070, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(40, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(41, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(42, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(43, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(44, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(45, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(46, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(47, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(48, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(49, 1, 0.060, 0.030, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(50, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(51, 1, 0.105, 0.075, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(52, 1, 0.210, 0.150, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(53, 1, 0.140, 0.095, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(54, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(55, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(56, 3, 5.000, 5.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8)]

bolognani_net56 = \
    [LineData(56, 1, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(1, 2, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(2, 3, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(3, 4, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(4, 5, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(5, 6, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(6, 7, 125, None, 0.0004187070, 0.0008578383, 9.46157098735599E-009, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 8, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(8, 9, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 10, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(10, 11, 750, None, 0.0025122418, 0.0051470300, 5.67694259241360E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(11, 12, 250, None, 0.0027749546, 0.0013221274, 1.83926822251266E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(12, 13, 175, None, 0.0019424682, 0.0009254892, 1.28748775575886E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(13, 14, 350, None, 0.0038849364, 0.0018509784, 2.57497551151773E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(14, 15, 425, None, 0.0047174228, 0.0022476166, 3.12675597827153E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(15, 16, 325, None, 0.0036074409, 0.0017187657, 2.39104868926646E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(11, 17, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(17, 18, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(18, 19, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(19, 20, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(20, 21, 100, None, 0.0003349656, 0.0006862707, 7.56925678988480E-009, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(21, 22, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(21, 23, 475, None, 0.0015910865, 0.0032597857, 3.60000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(23, 24, 475, None, 0.0015910865, 0.0032597857, 3.60000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(24, 25, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(25, 26, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(19, 27, 700, None, 0.0023447590, 0.0048038947, 5.30000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(27, 28, 450, None, 0.0015073451, 0.0030882180, 3.40616555544816E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(28, 29, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(29, 30, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(30, 31, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(31, 32, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(17, 33, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(33, 34, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(34, 35, 550, None, 0.0018423107, 0.0037744887, 4.16309123443664E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(35, 36, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(33, 37, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(37, 38, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(38, 39, 325, None, 0.0010886381, 0.0022303797, 2.46000845671256E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(4, 40, 825, None, 0.0027634660, 0.0056617331, 6.24463685165496E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(40, 41, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(41, 42, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(42, 43, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(43, 44, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(44, 45, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(45, 46, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(40, 47, 375, None, 0.0012561209, 0.0025735150, 2.83847129620680E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(47, 48, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(48, 49, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(49, 50, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(50, 51, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(51, 52, 150, None, 0.0005024484, 0.0010294060, 1.13538851848272E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(51, 53, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(53, 54, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(54, 55, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360)]


# 33 bus sub-network

bolognani_mapping33 = dict(zip([33], [56]))

bolognani_bus33 = \
    [BusData(1, 1, 0.160, 0.080, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(2, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(3, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(4, 1, 0.100, 0.050, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(5, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(6, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(7, 1, 0.000, 0.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(8, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(9, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(10, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(11, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(12, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(13, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(14, 1, 0.075, 0.035, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(15, 1, 0.140, 0.100, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(16, 1, 0.075, 0.035, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(17, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(18, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(19, 1, 0.245, 0.180, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(20, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(21, 1, 0.000, 0.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(22, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(23, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(24, 1, 0.060, 0.030, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(25, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(26, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(27, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(28, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(29, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(30, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(31, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(32, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(33, 3, 5.000, 5.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8)]

bolognani_net33 = \
    [LineData(33, 1, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(1, 2, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(2, 3, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(3, 4, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(4, 5, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(5, 6, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(6, 7, 125, None, 0.0004187070, 0.0008578383, 9.46157098735599E-009, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 8, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(8, 9, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 10, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(10, 11, 750, None, 0.0025122418, 0.0051470300, 5.67694259241360E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(11, 12, 250, None, 0.0027749546, 0.0013221274, 1.83926822251266E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(12, 13, 175, None, 0.0019424682, 0.0009254892, 1.28748775575886E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(13, 14, 350, None, 0.0038849364, 0.0018509784, 2.57497551151773E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(14, 15, 425, None, 0.0047174228, 0.0022476166, 3.12675597827153E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(15, 16, 325, None, 0.0036074409, 0.0017187657, 2.39104868926646E-007, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(11, 17, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(17, 18, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(18, 19, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(19, 20, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(20, 21, 100, None, 0.0003349656, 0.0006862707, 7.56925678988480E-009, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(21, 22, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(21, 23, 475, None, 0.0015910865, 0.0032597857, 3.60000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(23, 24, 475, None, 0.0015910865, 0.0032597857, 3.60000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(24, 25, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(25, 26, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(19, 27, 700, None, 0.0023447590, 0.0048038947, 5.30000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(27, 28, 450, None, 0.0015073451, 0.0030882180, 3.40616555544816E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(28, 29, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(29, 30, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(30, 31, 225, None, 0.0007536726, 0.0015441090, 1.70000000000000E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(31, 32, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360)]


# 21 bus sub-network

bolognani_mapping21 = dict(zip([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56]))

bolognani_bus21 = \
    [BusData(1, 1, 0.160, 0.080, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(2, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(3, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(4, 1, 0.100, 0.050, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(5, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(6, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(7, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(8, 1, 0.080, 0.040, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(9, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(10, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(11, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(12, 1, 0.120, 0.060, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(13, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(14, 1, 0.060, 0.030, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(15, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(16, 1, 0.105, 0.075, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(17, 1, 0.210, 0.150, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(18, 1, 0.140, 0.095, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(19, 1, 0.040, 0.020, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(20, 1, 0.020, 0.010, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(21, 3, 5.000, 5.000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8)]

bolognani_net21 = \
    [LineData(21, 1, 400, None, 0.0013398623, 0.0027450827, 3.02770271595392E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(1, 2, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(2, 3, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(3, 4, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(4, 5, 825, None, 0.0027634660, 0.0056617331, 6.24463685165496E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(5, 6, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(6, 7, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 8, 275, None, 0.0009211553, 0.0018872444, 2.08154561721832E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(8, 9, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(9, 10, 300, None, 0.0010048967, 0.0020588120, 2.27077703696544E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(10, 11, 350, None, 0.0011723795, 0.0024019474, 2.64923987645968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(5, 12, 375, None, 0.0012561209, 0.0025735150, 2.83847129620680E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(12, 13, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(13, 14, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(14, 15, 200, None, 0.0006699312, 0.0013725413, 1.51385135797696E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(15, 16, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(16, 17, 150, None, 0.0005024484, 0.0010294060, 1.13538851848272E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(16, 18, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(18, 19, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(20, 21, 250, None, 0.0008374139, 0.0017156767, 1.89231419747120E-008, 100, 100, 100, 0, 0, 1, -360, 360)]


cigre_mv_feeder1_bus = \
    [BusData(1, 1, 0.50170, 0.208882, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(2, 1, 0.43165, 0.108182, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(3, 1, 0.72750, 0.182329, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(4, 1, 0.54805, 0.137354, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(5, 1, 0.07650, 0.047410, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(6, 1, 0.58685, 0.147078, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(7, 1, 0.57375, 0.355578, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(8, 1, 0.54330, 0.161264, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(9, 1, 0.32980, 0.082656, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8),
     BusData(10, 3, 10.00000, 10.00000, 0.000, 0.000, 1, 1, 0, 20, 1, 1.2, 0.8)]

cigre_mv_feeder1_net = \
    [LineData(10, 1, 4.42, None, 2.21442, 3.16472, 66.8193058E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(1, 2, 0.61, None, 0.30561, 0.43676, 9.2216689E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(2, 3, 0.56, None, 0.28056, 0.40096, 8.4657944E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(3, 4, 1.54, None, 0.77154, 1.10264, 23.2809346E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(4, 5, 0.24, None, 0.12024, 0.17184, 3.6281976E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(5, 6, 1.67, None, 0.83667, 1.19572, 25.2462083E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(6, 7, 0.32, None, 0.16032, 0.22912, 4.8375968E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(7, 8, 0.77, None, 0.38577, 0.55132, 11.6404673E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(8, 9, 0.33, None, 0.16533, 0.23628, 4.9887717E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(1, 6, 1.30, None, 0.65130, 0.93080, 19.652737E-008, 100, 100, 100, 0, 0, 1, -360, 360),
     LineData(9, 2, 0.49, None, 0.24549, 0.35084, 7.4075701E-008, 100, 100, 100, 0, 0, 1, -360, 360)]


test_3phase_bus = \
    [BusData(1, 1, (0.04, 0.04, 0.04), (0.04, 0.04, 0.04), 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),#(0.04, 0.02, 0.02), (0.01, 0.02, 0.01)
     #BusData(2, 1, 0, 0, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     ##BusData(3, 1, (0.08, 0, 0), (0.04, 0, 0), 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     #BusData(4, 1, (0, 0.12, 0), (0, 0.08, 0), 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8),
     BusData(5, 3, 10.00000, 10.00000, 0.000, 0.000, 1, 1, 0, 4.16, 1, 1.2, 0.8)]

test_3phase_net = \
    [LineData(5, 1, 2.4, "OG3")]#,
     #LineData(1, 2, 0.2, "OG3"),
     #LineData(2, 3, 0.2, "OG3"),
     #LineData(2, 4, 0.2, "OG3")]


"""
Similarly to http://home.engineering.iastate.edu/~jdm/ee457/SymmetricalComponents2.pdf
Z_0 = Z_Y/3 + Z_n, Z_1 = Z_Y/3 where diagonal elements are Z_Y + Z_n and off-diagonal at Z_n
Defining Z_Y as Z_S-Z_M and Z_N as Z_M, we get Z_0 = Z_S/3 + 2*Z_M/3 and Z_1 = (Z_S - Z_M)/3

from https://github.com/tshort/OpenDSS/blob/master/Distrib/IEEETestCases/123Bus/IEEELineCodes.DSS
Z_S ≈ 0.29 + 0.14j and Z_M ≈ 0.095 + 0.05j for UG lines
Z_S ≈ 0.087 + 0.20j and Z_M ≈ 0.029 + 0.08j for OG lines

2 phased lines have almost the same parameters as 3 phased and 1 phased is only OG as
Z1_1 = Z1_0 ≈ 0.25 + 0.25j

Therefore:
"""
Z3_0_og = (0.087 + 0.20j)/3 + 2*(0.029 + 0.08j)/3
Z3_1_og = (0.087 + 0.20j)/3 - (0.029 + 0.08j)/3
Z1_1_og = (0.25 + 0.25j)/3
Z1_0_og = Z1_1_og

Z3_0_ug = (0.29 + 0.14j)/3 + 2*(0.095 + 0.05j)/3
Z3_1_ug = (0.29 + 0.14j)/3 - (0.095 + 0.05j)/3

ieee123_types = {"OG3" : {"r_ohm_per_km": np.real(Z3_1_og), "x_ohm_per_km": np.imag(Z3_1_og),
                "c_nf_per_km": 0, "max_i_ka": 10000, "c0_nf_per_km":  0,
                "r0_ohm_per_km": np.real(Z3_0_og), "x0_ohm_per_km": np.imag(Z3_0_og)},

                "UG3" : {"r_ohm_per_km": np.real(Z3_1_ug), "x_ohm_per_km": np.imag(Z3_1_ug),
                "c_nf_per_km": 0, "max_i_ka": 10000, "c0_nf_per_km":  0,
                "r0_ohm_per_km": np.real(Z3_0_ug), "x0_ohm_per_km": np.imag(Z3_0_ug)},

                "OG1" : {"r_ohm_per_km": np.real(Z1_1_og), "x_ohm_per_km": np.imag(Z1_1_og),
                "c_nf_per_km": 0, "max_i_ka": 10000, "c0_nf_per_km":  0,
                "r0_ohm_per_km": np.real(Z1_0_og), "x0_ohm_per_km": np.imag(Z1_0_og)}
}

